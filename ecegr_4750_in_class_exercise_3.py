# -*- coding: utf-8 -*-
"""ECEGR 4750 In-Class Exercise 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10FI1Qs_lE4RYmp9Q0J9p0gd-G2btB0o2
"""

from google.colab import files
files.upload()

# -*- coding: utf-8 -*-
"""
regression example
Chirag Shah, University of Washington
"""
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
# Load the dataset.
df = pd.read_csv("./Boston.csv", index_col = 0)
print("correlation coefficient = ", np.corrcoef(df.indus, df.nox) [0,1])
# Now that a relationship between 'Indus' and 'NOX' is verified, let's get more precise about it.
# Prepare the predictor and response variables for the linear regression.
y = df.nox # dependent variable
X = df.indus # independent variable
X = sm.add_constant(X) # adding the y intercept
# regression process
lr_model = sm.OLS(y,X).fit() # regression w/ ordinary least squares
# checking model result
print(lr_model.summary())
# VISUALIZATION
#100 equidistant points,which will look like a line
X_prime = np.linspace(X.indus.min(), X.indus.max(), 100) # Guido took this directly from MATLAB.
# remember to add the constant.
X_prime = sm.add_constant(X_prime)
# Calculate the response values predicted by our linear-regression equation.
y_hat = lr_model.predict(X_prime)
# Plot the raw data.
plt.scatter(df.indus, df.nox)
# Add the regression line (in red).
plt.plot(X_prime[:,1], y_hat, "red", alpha = 0.9)
plt.xlabel("Total Indus")
plt.ylabel("Nitrogen Oxides (NOX)")

# -*- coding: utf-8 -*-
"""
regression example
Chirag Shah, University of Washington
"""
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
# Load the dataset.
df = pd.read_csv("./Boston.csv", index_col = 0)
print("correlation coefficient = ", np.corrcoef(df.rm, df.medv) [0,1])
# Now that a relationship between 'RM' and 'MEDV' is verified, let's get more precise about it.
# Prepare the predictor and response variables for the linear regression.
y = df.medv # dependent variable
X = df.rm # independent variable
X = sm.add_constant(X) # adding the y intercept
# regression process
lr_model = sm.OLS(y,X).fit() # regression w/ ordinary least squares
# checking model result
print(lr_model.summary())
# VISUALIZATION
#100 equidistant points,which will look like a line
X_prime = np.linspace(X.rm.min(), X.rm.max(), 100) # Guido took this directly from MATLAB.
# remember to add the constant.
X_prime = sm.add_constant(X_prime)
# Calculate the response values predicted by our linear-regression equation.
y_hat = lr_model.predict(X_prime)
# Plot the raw data.
plt.scatter(df.rm, df.medv)
# Add the regression line (in red).
plt.plot(X_prime[:,1], y_hat, "red", alpha = 0.9)
plt.xlabel("RM")
plt.ylabel("MEDV")

"""The proportion of non-retail business acres (INDUS) is chosen as an independent variable for NOX because greater industrial activity is linked to higher nitrogen oxide emissions, which raise NOX concentrations in urban areas. So I though that they would have a higher correlation than other variables given.

The average number of rooms per dwelling (RM) is selected as an independent variable for MEDV since larger homes typically have higher market values, making RM a strong indicator of property prices. Same reason as the previous example, I thought these two variables would have a high correlation.

"""