# -*- coding: utf-8 -*-
"""ECEGR4750 Lab0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DZa0V4-ixx4MRJM9_Ofr3BocJ6QQpP-b
"""

def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False

def main():
    year = int(input("Enter a year between 1 and 3199: "))
    if 1 <= year <= 3199:
        if is_leap_year(year):
            print(f"{year} is a leap year.")
        else:
            print(f"{year} is not a leap year.")
    else:
        print("Please enter a valid year between 1 and 3199.")

if __name__ == "__main__":
    main()

def main():
    correct_answers = {'A', 'B'}
    question = """
    Which of the following locations are countries?
    A. Japan
    B. Canada
    C. Honolulu
    D. Los Angeles
    E. Miami
    """

    while True:
        print(question)
        user_input = input("Enter the letters of all correct answers (e.g., AB for A and B): ").upper()

        user_answers = set(user_input)

        if user_answers.issubset({'A', 'B', 'C', 'D', 'E'}):
            if user_answers == correct_answers:
                print("Correct! Japan and Canada are countries.")
                break
            else:
                print("Incorrect. Try again.")
        else:
            print("Please enter only valid choices from A to E.")

if __name__ == "__main__":
    main()

import numpy as np
import matplotlib.pyplot as plt

# Define the dataset
dataset1 = [85, 62, 78, 64, 25, 12, 74, 96, 63, 45, 78, 20, 5, 30, 45, 78, 45, 96, 65, 45, 74, 12, 78, 23, 8]

# Find the largest and smallest values in dataset1
max_value1 = np.max(dataset1)
min_value1 = np.min(dataset1)
print("Max (dataset1):", max_value1)
print("Min (dataset1):", min_value1)

# Find the mean average of dataset1
mean_value1 = np.mean(dataset1)
print("Mean (dataset1):", mean_value1)

# Find the median average of dataset1
median_value1 = np.median(dataset1)
print("Median (dataset1):", median_value1)

# Find the variance of dataset1
variance_value1 = np.var(dataset1)
print("Variance (dataset1):", variance_value1)

# Create a histogram plot for dataset1
plt.figure()
hist1, edges1 = np.histogram(dataset1)
plt.bar(edges1[:-1], hist1, width=edges1[1:] - edges1[:-1])
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of dataset1')
plt.show()

# Create a pseudo-random dataset of 1000 values
dataset2 = np.random.randn(1000)

# Repeat steps 2-8 for dataset2

# Find the largest and smallest values in dataset2
max_value2 = np.max(dataset2)
min_value2 = np.min(dataset2)
print("Max (dataset2):", max_value2)
print("Min (dataset2):", min_value2)

# Find the mean average of dataset2
mean_value2 = np.mean(dataset2)
print("Mean (dataset2):", mean_value2)

# Find the median average of dataset2
median_value2 = np.median(dataset2)
print("Median (dataset2):", median_value2)

# Find the variance of dataset2
variance_value2 = np.var(dataset2)
print("Variance (dataset2):", variance_value2)

# Create a histogram plot for dataset2
plt.figure()
hist2, edges2 = np.histogram(dataset2)
plt.bar(edges2[:-1], hist2, width=edges2[1:] - edges2[:-1])
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of dataset2')
plt.show()

# Report the number of bars in the histogram of dataset2
num_bars = len(hist2)
print("Number of bars in the histogram (dataset2):", num_bars)

# Modify the histogram to have 100 bins
plt.figure()
hist2_100, edges2_100 = np.histogram(dataset2, bins=100)
plt.bar(edges2_100[:-1], hist2_100, width=edges2_100[1:] - edges2_100[:-1])
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of dataset2 with 100 bins')
plt.show()

# Modify the histogram to have 50 bins
plt.figure()
hist2_50, edges2_50 = np.histogram(dataset2, bins=50)
plt.bar(edges2_50[:-1], hist2_50, width=edges2_50[1:] - edges2_50[:-1])
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of dataset2 with 50 bins')
plt.show()

pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

# fetch dataset
daily_demand_forecasting_orders = fetch_ucirepo(id=409)

# data (as pandas dataframes)
x = daily_demand_forecasting_orders.data.features
y = daily_demand_forecasting_orders.data.targets

# metadata
print(daily_demand_forecasting_orders.metadata)

# variable information
print(daily_demand_forecasting_orders.variables)

import pandas as pd
ddfo = pd.read_csv('https://archive.ics.uci.edu/static/public/409/daily+demand+forecasting+orders.zip', sep=";")

ddfo.head()

ddfo

import numpy as np

# Calculate the range (max - min) for each feature
range_x = x.max() - x.min()

#Calaculate mean for each feature
average_x = x.mean()

#Calculate the variance for each feature
variance_x = x.var()

print("Range:\n", range_x)
print("\nAverage:\n", average_x)
print("\nVariance:\n", variance_x)

import numpy as np

# Calculate the range (max - min) for each feature
range_y = y.max() - y.min()

#Calaculate mean for each feature
average_y = y.mean()

#Calculate the variance for each feature
variance_y = y.var()

print("Range:\n", range_y)
print("\nAverage:\n", average_y)
print("\nVariance:\n", variance_y)

from google.colab import files
files.upload()

import pandas as pd
dfo = pd.read_csv('./longley.csv')

dfo.head()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the dataset
dfo = pd.read_csv('./longley.csv')

# Display the first few rows of the dataset to understand the structure
print(dfo.head())

# Produce a scatterplot of GNP against 'Employed'
plt.figure(figsize=(8, 6))
plt.scatter(dfo['GNP'], dfo['Employed'], color='blue', alpha=0.7)
plt.xlabel('GNP')
plt.ylabel('Employed')
plt.title('Scatter Plot of GNP vs Employed')
plt.grid(True)
plt.show()

# Use NumPy to find the correlation coefficient between 'GNP' and 'Employed'
correlation_coefficient = np.corrcoef(dfo['GNP'], dfo['Employed'])[0, 1]
print(f"Correlation Coefficient between GNP and Employed: {correlation_coefficient:.4f}")

# Interpretation
if correlation_coefficient > 0:
    relationship = "positive"
elif correlation_coefficient < 0:
    relationship = "negative"
else:
    relationship = "no"

print(f"The correlation coefficient is {correlation_coefficient:.4f}, indicating a {relationship} relationship between GNP and Employed.")